Преобразовать изображение так, чтобы остался только ахроматический цвет!
Не преобразовать цветное в серое, а именно выделить ахроматику.








    f = open(output_path + '/dynamic_range.txt', 'w')







    f.write('Dynamic range:\n')

    dynamic_range = load_from_file_or_process_data(
        output_path + '/__brightness_fast.bin',
        get_dynamic_range,
        image,
        lambda R,G,B: sum([R, G, B]) / 3
    )
    f.write(dynamic_range, 'EV (fast)\n')

    dynamic_range = load_from_file_or_process_data(
        output_path + '/__brightness_fast.bin',
        get_dynamic_range,
        image,
        lambda R,G,B: (0.2126 * R) + (0.7152 * G) + (0.0722 * B)
    )
    f.write(dynamic_range, 'EV (standart)\n')

    dynamic_range = load_from_file_or_process_data(
        output_path + '/__brightness_fast.bin',
        get_dynamic_range,
        image,
        lambda R,G,B: (0.299 * R + 0.587 * G + 0.114 * B)
    )
    f.write(dynamic_range, 'EV (A)\n')

    dynamic_range = load_from_file_or_process_data(
        output_path + '/__brightness_fast.bin',
        get_dynamic_range,
        image,
        lambda R,G,B: np.sqrt(0.299 * (R ** 2) + 0.587 * (G ** 2) + 0.114 * (B ** 2))
    )
    f.write(dynamic_range, 'EV (B)\n')

    #hist = cv2.calcHist([image], [0], None, [256], [0, 256])




    f.close()


def get_dynamic_range(
    title,
    image,
    lambda_func
):

    print("*****************************************************")
    print("Starting: ", inspect.currentframe().f_code.co_name, ": ", title)
    print("*****************************************************")

    y_max, x_max, z = image.shape

    brightness = []

    for x in range(1, x_max):
        for y in range(1, y_max):
            try:
                pixel = image[x, y]
                R, G, B = pixel
                brightness.append(lambda_func(R, G, B))

            except IndexError:
                pass

    dynamic_range = round(np.log2(max(brightness)) - np.log2(min((brightness))), 2)
    print('has a dynamic range of', dynamic_range, 'EV')

    return dynamic_range
